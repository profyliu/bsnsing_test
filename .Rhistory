c(-7.30526971863583, -7.30526971863583, 7.02424655435607, 7.02424655435607),
col = poly.col, border = T)
if (stp >= 5)
polygon(c(-3.15160716418177, 4.20334337279201, 4.20334337279201, -3.15160716418177),
c(-4.14448169991374, -4.14448169991374, 3.80654070759192, 3.80654070759192),
col = poly.col, border = T)
if (stp >= 6)
polygon(c(4.66934931930155, 7.50762130133808, 7.50762130133808, 4.66934931930155),
c(-7.30526971863583, -7.30526971863583, -4.68771165935323, -4.68771165935323),
col = poly.col, border = T)
if (stp >= 7)
polygon(c(-6.742308, -4.38879024703056, -4.38879024703056, -6.742308),
c(-7.30526971863583, -7.30526971863583, -4.68771165935323, -4.68771165935323),
col = poly.col, border = T)
if (stp >= 8)
polygon(c(-6.742308, -5.56910431943834, -5.56910431943834, -6.742308),
c(2.67756497953087, 2.67756497953087, 7.02424655435607, 7.02424655435607),
col = poly.col, border = T)
if (stp >= 9)
polygon(c(4.72330882097594, 7.50762130133808, 7.50762130133808, 4.72330882097594),
c(5.12446383479983, 5.12446383479983, 7.02424655435607, 7.02424655435607),
col = poly.col, border = T)
if (stp >= 10)
polygon(c(-5.56910431943834, -4.38766428502277, -4.38766428502277, -5.56910431943834),
c(5.10674591991119, 5.10674591991119, 7.02424655435607, 7.02424655435607),
col = poly.col, border = T)
if (stp >= 11)
polygon(c(3.38044732576236, 4.20334337279201, 4.20334337279201, 3.38044732576236),
c(2.56138123106211, 2.56138123106211, 3.80654070759192, 3.80654070759192),
col = 'white', border = T)
# if (stp >= 12)
#   polygon(c(-3.15160716418177, 4.20334337279201, 4.20334337279201, -3.15160716418177),
#           c(-4.14448169991374, -4.14448169991374, -2.95320967212319, -2.95320967212319),
#           col = 'white', border = T)
with(df, {
points(x1,x2, col = (y + col.shift), pch = (y + pch.shift), cex.lab = cex.lab, cex.axis = cex.axis, cex = cex)
})
box()
draw.circle(0,0,5,lty=2)
draw.circle(0,0,7.5,lty=2)
# }
library(bsnsing)
library(rpart)
library(party)
setwd("C:\\Users\\gn0061\\Google Drive\\R_code\\bsnsing_test")
# split 1:n into k folds
split.k.folds <- function(indset, k, seed = 2017) {
folds <- list()
curset <- indset
n <- length(indset)
curn <- n
for (i in 1:k) {
set.seed(seed)
folds[[i]] <- sample(curset, round(curn/(k - i + 1)))
curset <- setdiff(curset, folds[[i]])
curn <- length(curset)
}
return(folds)
}
# Load birthwt
data(birthwt, package = 'MASS')
birthwt$low <- as.factor(birthwt$low)
# Load Titanic
library(datasets)
ti <- as.data.frame(Titanic)
# expand the data by the Freq column
titanic <- with(ti, {
data.frame(Class = rep(Class, Freq), Sex = rep(Sex, Freq), Age = rep(Age, Freq), Survived = rep(Survived, Freq))
})
# Load Wisconsin Breast Cancer (wdbc) Data
# wdbc <- read.table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"),
#                    sep = ',',
#                    header = F)
# save(wdbc, file = 'data/wdbc.RData')
load(file = 'data/wdbc.RData')
names(wdbc)[1:2] <- c("ID", "class")
wdbc$ID <- NULL
# Load heart
heart <- read.csv("data/Heart.csv", header = T, stringsAsFactors = T)
rownames(heart) <- heart$X
heart$X <- NULL
# Load GlaucomaMVF
data("GlaucomaMVF", package = "ipred")
# Load the Auto data
library(ISLR)
auto = Auto
auto$origin <- as.factor(ifelse(Auto$origin == 1, "USA", "NonUSA"))
# Load the parkinsons data
parkin <- read.csv(file = 'data/parkinsons.data', header = T, sep = ',')
rownames(parkin) <- parkin$name
parkin$name <- NULL
parkin$status <- as.factor(parkin$status)
# Load the Indian Liver Patient Dataset (ILPD)
ILPD <- read.csv(file = 'data/ILPD.csv', header = F)
colnames(ILPD) <- c("Age", "Gender", "TB", "DB", "Alkphos", "Sgpt", "Sgot", "TP", "ALB", "AG", "Selector")
ILPD$Selector <- as.factor(ILPD$Selector)
# Load the Ionosphere dataset
Ionos <- read.csv(file = "data/Ionosphere.data", header = F)
colnames(Ionos)[35] <- "Class"
# Load the pima-indians-diabetes dataset
pima <- read.csv(file = "data/pima-indians-diabetes.data", header = F)
colnames(pima) <- c("TimesPregnant", "Glucose", "BloodPressure", "SkinThickness", "SerumInsulin", "BMI", "DiabetesPedigree","Age", "Class")
pima$Class <- as.factor(pima$Class)
# Load the sonar data
sonar <- read.csv(file = "data/sonar.data", header = F)
colnames(sonar)[61] <- "Class"
# Load the blood transfusion service center dataset
trans <- read.csv(file = "data/transfusion.data", header = T)
trans$donated.blood <- as.factor(trans$donated.blood)
# Load the peptide dataset
peptide <- read.csv(file = "data/peptide.data", header = T, sep = " ")
rownames(peptide) <- peptide$id
peptide$id <- NULL
peptide$bind <- as.factor(peptide$bind)
# Load the hepatitis dataset
hepatitis <- read.csv(file = "data/hepatitis.data", header = F, na.strings = "?")
colnames(hepatitis) <- c("Class", "Age", "Sex", "Steroid",
"Antivirals", "Fatigue", "Malaise",
"Anorexia", "LiverBig", "LiverFirm",
"SpleenPalpable", "Spiders", "Ascites",
"Varices", "Bilirubin", "AlkPhosphate",
"SGOT", "Albumin", "Protime", "Histology")
hepatitis$Class <- ifelse(hepatitis$Class == 1, "Die", "Live")
hepatitis$Class <- as.factor(hepatitis$Class)
# Load the dermatology dataset
derm <- read.csv(file = "data/dermatology.data", header = F, na.strings = "?")
derm.names <- read.csv(file = "data/dermatology.names", header = F)
colnames(derm) <- derm.names$V1
derm$class <- as.factor(derm$class)
# Dermatology with small perturbation
derm.noi <- derm
derm.noi[, 1:34] <- derm.noi[, 1:34] + matrix(rnorm(nrow(derm.noi)*(ncol(derm.noi)-1), 0, 0.001), nrow = nrow(derm.noi), ncol = ncol(derm.noi) - 1)
# Load iris
Iris <- iris
iris_noise <- matrix(rnorm(nrow(Iris)*(ncol(Iris)-1), 0, 0.001), nrow = nrow(Iris), ncol = ncol(Iris) - 1)
Iris[, 1:4] <- Iris[, 1:4] + iris_noise
# Load the dystrophy dataset
data('dystrophy', package = 'ipred')
# Load the proteomics dataset
# protein = read.csv(file = "data/annotatedProteins.csv", header=T, na.strings = 'NA')
# protein = na.omit(protein)
# protein_pos <- protein[which(protein$mito.2015 == TRUE), ]
# P <- nrow(protein_pos)
# protein_neg <- setdiff(1:)
# train_index <- sample(1:nrow(protein), round(0.2*nrow(protein)))
# test_index <- setdiff(1:nrow(protein), train_index)
#
# bs <- bsnsing(mito.2015 ~ iTRAQ8.113 + iTRAQ8.114 + iTRAQ8.115 + iTRAQ8.116 +
#                 iTRAQ8.117 + iTRAQ8.118 + iTRAQ8.119 + iTRAQ8.121, data = protein, subset = train_index, nseg.numeric = 5, stop.prob = 0.95, verbose = T)
# data sets for testing
ds.names <- c("wdbc",
"auto",
"birthwt",
"heart",
"GlaucomaMVF",
"titanic",
"parkin",
"ILPD",
"Ionos",
"pima",
"sonar",
"trans",
"peptide",
"hepatitis",
"derm",
"derm.noi",
"iris",
"Iris",
"dystrophy",
"protein")
ds.formula <-c("class ~.",
"origin ~.-name",
"low ~ age + lwt + race + smoke + ptl + ht + ui + ftv",  ## ctree does not recognize the formula "low ~ . - bwt" correctly
"AHD ~ .",
"Class ~ .",
"Survived ~ .",
"status ~ .",
"Selector ~ .",
"Class ~ .",
"Class ~ .",
"Class ~ .",
"donated.blood ~ .",
"bind ~ .",
"Class ~ .",
"class ~ .",
"class ~ .",
"Species ~ .",
"Species ~ .",
"Class ~ AGE + CK + H + PK + LD",
"mito.2015 ~ iTRAQ8.113 + iTRAQ8.114 + iTRAQ8.115 + iTRAQ8.116 +
iTRAQ8.117 + iTRAQ8.118 + iTRAQ8.119 + iTRAQ8.121")
ds.respvar <- c("class",
"origin",
"low",
"AHD",
"Class",
"Survived",
"status",
"Selector",
"Class",
"Class",
"Class",
"donated.blood",
"bind",
"Class",
"class",
"class",
"Species",
"Species",
"Class",
"mito.2015")
length(ds.formula)
bscontrol()
testUCImean <- data.frame(dsname = character(), bs_train = numeric(), bs_accu = numeric(), rp_accu = numeric(), ct_accu = numeric())
testUCIsd <- data.frame(dsname = character(), bs_train_sd = numeric(), bs_accu_sd = numeric(), rp_accu_sd = numeric(), ct_accu_sd = numeric())
for (ds in 1:19) {
n <- nrow(eval(parse(text = ds.names[ds])))
k.round = 5
k.test = 2
lambda = 1
nseg = 10
num2factor = 5
opt.model <- 'mip'
#node.size <- max(round(n/k.test*(k.test-1)*0.1), 10)
node.size <- 10
stop.prob = 0.9
max.rules = 5
verbose = F
accu_rp <- rep(0, k.round*k.test)
accu_bs <- rep(0, k.round*k.test)
accu_ct <- rep(0, k.round*k.test)
train_bs <- rep(0, k.round*k.test)
for (rnd in 1:k.round) {
test.folds <- split.k.folds(1:n, k.test, seed = rnd*2017)
for (testfd in 1:k.test) {
test_index <- test.folds[[testfd]]
train_index <- setdiff(1:n, test_index)
newdata <- eval(parse(text = ds.names[ds]))[test_index,]
actual <- eval(parse(text = ds.names[ds]))[test_index, ds.respvar[ds]]
# ctree
model_ct <- ctree(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_ct <- predict(model_ct, newdata, type = 'response')
if (length(pred_ct) != length(actual)) stop("ctree: Predicted and Actual Dimension Mismatch.")
accu_ct[(rnd - 1)*2 + testfd] <- sum(actual == pred_ct)/length(actual)
# rpart
model_rp <- rpart(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_rp <- predict(model_rp, newdata, type = 'class')
if (length(pred_rp) != length(actual)) stop("rpart: Predicted and Actual Dimension Mismatch.")
accu_rp[(rnd - 1)*2 + testfd] <- sum(actual == pred_rp)/length(actual)
# bsnsing
model_bs <- bsnsing(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index,
lambda = lambda,
nseg.numeric = nseg,
opt.model = opt.model,
node.size = node.size,
stop.prob = stop.prob,
max.rules = max.rules,
num2factor = num2factor,
verbose = verbose)
pred_bs <- predict(model_bs, newdata, type = 'class')
if (length(pred_bs) != length(actual)) stop("bsnsing: Predicted and Actual Dimension Mismatch.")
accu_bs[(rnd - 1)*2 + testfd] <- sum(actual == pred_bs)/length(actual)
train_actual <- eval(parse(text = ds.names[ds]))[train_index, ds.respvar[ds]]
train_pred <- predict(model_bs, type = 'class')
train_bs[(rnd - 1)*2 + testfd] <- sum(train_actual == train_pred)/length(train_actual)
}
}
avg_accu_rp <- mean(accu_rp)
avg_accu_ct <- mean(accu_ct)
avg_accu_bs <- mean(accu_bs)
sd_accu_rp <- sd(accu_rp)
sd_accu_ct <- sd(accu_ct)
sd_accu_bs <- sd(accu_bs)
avg_train_bs <- mean(train_bs)
sd_train_bs <- sd(train_bs)
cat(paste(ds.names[ds], "\n"))
cat("rpart: \n")
print(accu_rp)
print(avg_accu_rp)
cat("ctree: \n")
print(accu_ct)
print(avg_accu_ct)
cat("bsnsing: \n")
print(accu_bs)
print(avg_accu_bs)
cat("bsnsing train: \n")
print(train_bs)
print(avg_train_bs)
this.mean <- data.frame(dsname = ds.names[ds], bs_train = avg_train_bs, bs_accu = avg_accu_bs, rp_accu = avg_accu_rp, ct_accu = avg_accu_ct)
testUCImean <- rbind(testUCImean, this.mean)
this.sd <- data.frame(dsname = ds.names[ds], bs_train = sd_train_bs, bs_accu_sd = sd_accu_bs, rp_accu_sd = sd_accu_rp, ct_accu_sd = sd_accu_ct)
testUCIsd <- rbind(testUCIsd, this.sd)
}
testUCImean
#testUCIsd
write.csv(testUCImean, file = 'data2/testUCImean.csv', row.names = F)
write.csv(testUCIsd, file = 'data2/testUCIsd.csv', row.names = F)
ds = 18
n <- nrow(eval(parse(text = ds.names[ds])))
k.round = 5
k.test = 2
lambda = 1
nseg = 10
num2factor = 5
opt.model <- 'mip'
#node.size <- max(round(n/k.test*(k.test-1)*0.1), 10)
node.size <- 10
stop.prob = 0.9
max.rules = 5
verbose = F
accu_rp <- rep(0, k.round*k.test)
accu_bs <- rep(0, k.round*k.test)
accu_ct <- rep(0, k.round*k.test)
train_bs <- rep(0, k.round*k.test)
for (rnd in 1:k.round) {
test.folds <- split.k.folds(1:n, k.test, seed = rnd*2017)
for (testfd in 1:k.test) {
test_index <- test.folds[[testfd]]
train_index <- setdiff(1:n, test_index)
newdata <- eval(parse(text = ds.names[ds]))[test_index,]
actual <- eval(parse(text = ds.names[ds]))[test_index, ds.respvar[ds]]
# ctree
model_ct <- ctree(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_ct <- predict(model_ct, newdata, type = 'response')
if (length(pred_ct) != length(actual)) stop("ctree: Predicted and Actual Dimension Mismatch.")
accu_ct[(rnd - 1)*2 + testfd] <- sum(actual == pred_ct)/length(actual)
# rpart
model_rp <- rpart(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_rp <- predict(model_rp, newdata, type = 'class')
if (length(pred_rp) != length(actual)) stop("rpart: Predicted and Actual Dimension Mismatch.")
accu_rp[(rnd - 1)*2 + testfd] <- sum(actual == pred_rp)/length(actual)
# bsnsing
model_bs <- bsnsing(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index,
lambda = lambda,
nseg.numeric = nseg,
opt.model = opt.model,
node.size = node.size,
stop.prob = stop.prob,
max.rules = max.rules,
num2factor = num2factor,
verbose = verbose)
pred_bs <- predict(model_bs, newdata, type = 'class')
if (length(pred_bs) != length(actual)) stop("bsnsing: Predicted and Actual Dimension Mismatch.")
accu_bs[(rnd - 1)*2 + testfd] <- sum(actual == pred_bs)/length(actual)
train_actual <- eval(parse(text = ds.names[ds]))[train_index, ds.respvar[ds]]
train_pred <- predict(model_bs, type = 'class')
train_bs[(rnd - 1)*2 + testfd] <- sum(train_actual == train_pred)/length(train_actual)
}
}
avg_accu_rp <- mean(accu_rp)
avg_accu_ct <- mean(accu_ct)
avg_accu_bs <- mean(accu_bs)
sd_accu_rp <- sd(accu_rp)
sd_accu_ct <- sd(accu_ct)
sd_accu_bs <- sd(accu_bs)
avg_train_bs <- mean(train_bs)
sd_train_bs <- sd(train_bs)
cat(paste(ds.names[ds], "\n"))
cat("rpart: \n")
print(accu_rp)
print(avg_accu_rp)
cat("ctree: \n")
print(accu_ct)
print(avg_accu_ct)
cat("bsnsing: \n")
print(accu_bs)
print(avg_accu_bs)
cat("bsnsing train: \n")
print(train_bs)
print(avg_train_bs)
summary(bs)
summary(model_bs)
summary(model_bs[[1]])
summary(model_bs[[2]])
summary(model_bs[[3]])
bs <- iris(Species ~ ., data = iris)
bs <- bsnsing(Species ~ ., data = iris)
summary(bs[[1]])
summary(bs[[2]])
summary(bs[[3]])
bs <- bsnsing(Species ~ ., data = iris, node.size = 10, max.rules = 5)
summary(bs[[2]])
summary(bs[[3]])
head(peptide)
nrow(peptide)
head(titanic)
bs <- bsnsing(Survived ~ ., data = titanic)
summary(bs)
bs <- bsnsing(Survived ~ ., data = titanic, stop.prob = 0.9, node.size = 10)
summary(bs)
bs <- bsnsing(low ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data = birthwt, node.size = 10)
summary(bs)
head(sonar)
head(parkin)
nrow(parkin)
bs <- bsnsing(status ~., data = parkin)
summary(bs)
bs <- bsnsing(status ~., data = parkin, max.rules=3)
summary(bs)
bs <- bsnsing(status ~., data = parkin, node.size = 20)
bs <- bsnsing(status ~., data = parkin, node.size = 10)
summary(bs)
bst <- bsnsing(Survived ~ ., data = titanic)
summary(bst)
head(titanic)
bst <- bsnsing(Survived ~ ., data = titanic, lambda = 10)
summary(bst)
bst <- bsnsing(Survived ~ ., data = titanic, lambda = 0)
summary(bst)
bst <- bsnsing(Survived ~ ., data = titanic, nseg.numeric = 20)
summary(bst)
ds=6
n <- nrow(eval(parse(text = ds.names[ds])))
k.round = 5
k.test = 2
lambda = 1
nseg = 10
num2factor = 5
opt.model <- 'mip'
#node.size <- max(round(n/k.test*(k.test-1)*0.1), 10)
node.size <- 10
stop.prob = 0.9
max.rules = 5
verbose = F
accu_rp <- rep(0, k.round*k.test)
accu_bs <- rep(0, k.round*k.test)
accu_ct <- rep(0, k.round*k.test)
train_bs <- rep(0, k.round*k.test)
for (rnd in 1:k.round) {
test.folds <- split.k.folds(1:n, k.test, seed = rnd*2017)
for (testfd in 1:k.test) {
test_index <- test.folds[[testfd]]
train_index <- setdiff(1:n, test_index)
newdata <- eval(parse(text = ds.names[ds]))[test_index,]
actual <- eval(parse(text = ds.names[ds]))[test_index, ds.respvar[ds]]
# ctree
model_ct <- ctree(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_ct <- predict(model_ct, newdata, type = 'response')
if (length(pred_ct) != length(actual)) stop("ctree: Predicted and Actual Dimension Mismatch.")
accu_ct[(rnd - 1)*2 + testfd] <- sum(actual == pred_ct)/length(actual)
# rpart
model_rp <- rpart(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_rp <- predict(model_rp, newdata, type = 'class')
if (length(pred_rp) != length(actual)) stop("rpart: Predicted and Actual Dimension Mismatch.")
accu_rp[(rnd - 1)*2 + testfd] <- sum(actual == pred_rp)/length(actual)
# bsnsing
model_bs <- bsnsing(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index,
lambda = lambda,
nseg.numeric = nseg,
opt.model = opt.model,
node.size = node.size,
stop.prob = stop.prob,
max.rules = max.rules,
num2factor = num2factor,
verbose = verbose)
pred_bs <- predict(model_bs, newdata, type = 'class')
if (length(pred_bs) != length(actual)) stop("bsnsing: Predicted and Actual Dimension Mismatch.")
accu_bs[(rnd - 1)*2 + testfd] <- sum(actual == pred_bs)/length(actual)
train_actual <- eval(parse(text = ds.names[ds]))[train_index, ds.respvar[ds]]
train_pred <- predict(model_bs, type = 'class')
train_bs[(rnd - 1)*2 + testfd] <- sum(train_actual == train_pred)/length(train_actual)
}
}
avg_accu_rp <- mean(accu_rp)
avg_accu_ct <- mean(accu_ct)
avg_accu_bs <- mean(accu_bs)
sd_accu_rp <- sd(accu_rp)
sd_accu_ct <- sd(accu_ct)
sd_accu_bs <- sd(accu_bs)
avg_train_bs <- mean(train_bs)
sd_train_bs <- sd(train_bs)
cat(paste(ds.names[ds], "\n"))
cat("rpart: \n")
print(accu_rp)
print(avg_accu_rp)
cat("ctree: \n")
print(accu_ct)
print(avg_accu_ct)
cat("bsnsing: \n")
print(accu_bs)
print(avg_accu_bs)
cat("bsnsing train: \n")
print(train_bs)
print(avg_train_bs)
summary(model_bs)
str(titanic)
library(rpart.plot)
rpart.plot(model_rp)
plot(model_ct)
rpart.plot(model_rp)
summary(model_bs)
?GlaucomaMVF
library(ipred)
?GlaucomaMVF
