<<<<<<< HEAD
data.frame(Class = rep(Class, Freq), Sex = rep(Sex, Freq), Age = rep(Age, Freq), Survived = rep(Survived, Freq))
})
rm(ti)
# Load Wisconsin Breast Cancer (wdbc) Data
# wdbc <- read.table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"),
#                    sep = ',',
#                    header = F)
# save(wdbc, file = 'data/wdbc.RData')
load(file = 'data/wdbc.RData')
names(wdbc)[1:2] <- c("ID", "class")
wdbc$ID <- NULL
# Load heart
heart <- read.csv("data/Heart.csv", header = T, stringsAsFactors = T)
rownames(heart) <- heart$X
heart$X <- NULL
# Load GlaucomaMVF
data("GlaucomaMVF", package = "ipred")
# Load the Auto data
# library(ISLR)
# auto = Auto
# auto$origin <- as.factor(ifelse(Auto$origin == 1, "USA", "EUJ"))
# auto$name <- NULL
# save(auto, file = 'data/auto.RData')
load(file = 'data/auto.RData')
# Load the parkinsons data
parkin <- read.csv(file = 'data/parkinsons.data', header = T, sep = ',')
rownames(parkin) <- parkin$name
parkin$name <- NULL
parkin$status <- as.factor(parkin$status)
# Load the Indian Liver Patient Dataset (ILPD)
ILPD <- read.csv(file = 'data/ILPD.csv', header = F)
colnames(ILPD) <- c("Age", "Gender", "TB", "DB", "Alkphos", "Sgpt", "Sgot", "TP", "ALB", "AG", "Selector")
ILPD$Selector <- as.factor(ILPD$Selector)
# Load the Ionosphere dataset
Ionos <- read.csv(file = "data/ionosphere.data", header = F)
colnames(Ionos)[35] <- "Class"
# Load the pima-indians-diabetes dataset
pima <- read.csv(file = "data/pima-indians-diabetes.data", header = F)
colnames(pima) <- c("TimesPregnant", "Glucose", "BloodPressure", "SkinThickness", "SerumInsulin", "BMI", "DiabetesPedigree","Age", "Class")
pima$Class <- as.factor(pima$Class)
# Load the sonar data
sonar <- read.csv(file = "data/sonar.data", header = F)
colnames(sonar)[61] <- "Class"
# Load the blood transfusion service center dataset
trans <- read.csv(file = "data/transfusion.data", header = T)
trans$donated.blood <- as.factor(trans$donated.blood)
# Load the peptide dataset
peptide <- read.csv(file = "data/peptide.data", header = T, sep = " ")
rownames(peptide) <- peptide$id
peptide$id <- NULL
peptide$bind <- as.factor(peptide$bind)
# Load the hepatitis dataset
hepatitis <- read.csv(file = "data/hepatitis.data", header = F, na.strings = "?")
colnames(hepatitis) <- c("Class", "Age", "Sex", "Steroid",
"Antivirals", "Fatigue", "Malaise",
"Anorexia", "LiverBig", "LiverFirm",
"SpleenPalpable", "Spiders", "Ascites",
"Varices", "Bilirubin", "AlkPhosphate",
"SGOT", "Albumin", "Protime", "Histology")
hepatitis$Class <- ifelse(hepatitis$Class == 1, "Die", "Live")
hepatitis$Class <- as.factor(hepatitis$Class)
# Load the dermatology dataset
derm <- read.csv(file = "data/dermatology.data", header = F, na.strings = "?")
derm.names <- read.csv(file = "data/dermatology.names", header = F)
colnames(derm) <- derm.names$V1
derm$class <- as.factor(derm$class)
rm(derm.names)
# Dermatology with small perturbation
derm.noi <- derm
derm.noi[, 1:34] <- derm.noi[, 1:34] + matrix(rnorm(nrow(derm.noi)*(ncol(derm.noi)-1), 0, 0.001), nrow = nrow(derm.noi), ncol = ncol(derm.noi) - 1)
# Load iris
Iris <- iris
iris_noise <- matrix(rnorm(nrow(Iris)*(ncol(Iris)-1), 0, 0.001), nrow = nrow(Iris), ncol = ncol(Iris) - 1)
Iris[, 1:4] <- Iris[, 1:4] + iris_noise
rm(iris_noise)
# Load the dystrophy dataset
data('dystrophy', package = 'ipred')
# Load the smiley data
smiley <- as.data.frame(mlbench.smiley())
colnames(smiley) <- c('x1','x2','class')
# Load the spirals data
spirals <- as.data.frame(mlbench.spirals(600, 1.5, 0.05))
colnames(spirals) <- c('x1','x2','class')
# Load the threenorm data
norm3p5 <- as.data.frame(mlbench.threenorm(600, 5))
norm3p10 <- as.data.frame(mlbench.threenorm(600, 10))
# Load the XOR data
xor3 <- as.data.frame(mlbench.xor(600,3))
# Load the MNIST data
#mnist <- read.csv(file = "data/short_prac_train.csv", header = T, na.strings = "?")
#bs <- bsnsing(label ~ ., data = mnist, verbose = T)
# Load the proteomics dataset
protein = read.csv(file = "data/annotatedProteins.csv", header=T, na.strings = 'NA')
protein = na.omit(protein)
protein_pos <- protein[which(protein$mito.2015 == TRUE), c('mito.2015', 'iTRAQ8.113', 'iTRAQ8.114', 'iTRAQ8.115', 'iTRAQ8.116', 'iTRAQ8.117', 'iTRAQ8.118', 'iTRAQ8.119', 'iTRAQ8.121')]
P <- nrow(protein_pos)
protein_negall <- protein[which(protein$mito.2015 == FALSE), c('mito.2015', 'iTRAQ8.113', 'iTRAQ8.114', 'iTRAQ8.115', 'iTRAQ8.116', 'iTRAQ8.117', 'iTRAQ8.118', 'iTRAQ8.119', 'iTRAQ8.121')]
protein_neg <- protein_negall[sample(1:nrow(protein_negall), P), ]
protein_balanced <- rbind(protein_pos, protein_neg)
protein_balanced$mito.2015 <- as.factor(protein_balanced$mito.2015)
rm(protein, protein_negall, protein_pos, protein_neg, P)
# Load the Haberman data
haberman <- read.table(file = 'data/haberman.data', header = FALSE, sep = ',')
colnames(haberman) <- c("age", "year", "axillary.nodes", "survival")
haberman$survival <- as.factor(ifelse(haberman$survival == 1, "Survived", "Died"))
# Load the mammograph data
mammo <- read.table(file = 'data/mammographic_masses.data', header = FALSE, sep = ',', na.strings = '?')
colnames(mammo) <- c('BI.RADS','Age','Shape','Margin','Density','Severity')
mammo$Shape <- as.factor(ifelse(mammo$Shape == 1, 'round', ifelse(mammo$Shape == 1, 'oval', ifelse(mammo$Shape == 3, 'lobular', ifelse(mammo$Shape == 4, 'irregular', 'unknown')))))
mammo$Margin <- as.factor(ifelse(mammo$Margin == 1, 'circumscribed', ifelse(mammo$Margin == 2, 'microlobulated', ifelse(mammo$Margin == 3, 'obscured', ifelse(mammo$Margin == 4, 'ill_defined', ifelse(mammo$Margin == 5, 'spiculated', 'unknown'))))))
mammo$Severity <- as.factor(ifelse(mammo$Severity == 0, 'benigh','malignant'))
mammo$Density <- as.factor(ifelse(mammo$Density == 1, 'hight', ifelse(mammo$Density == 2, 'iso', ifelse(mammo$Density == 3, 'low', ifelse(mammo$Density == 4, 'fat_containing', 'unknown')))))
mammo <- na.omit(mammo)
# Load the votes data
votes <- read.table(file = 'data/house-votes-84.data', header = F, sep = ',', na.strings = '?')
votes$V1 <- as.factor(votes$V1)
# Load the SPECT data
SPECT <- read.table(file = 'data/SPECT.data', header = F, sep = ',')
SPECT$V1 <- as.factor(SPECT$V1)
# Load the tic-tac-toe data
tictactoe <- read.table(file = 'data/tic-tac-toe.data', header = F, sep = ',')
tictactoe$V10 <- as.factor(tictactoe$V10)
# Load the car evaluation data
carEval <- read.table(file = 'data/car.data', header = F, sep = ',')
colnames(carEval) <- c('buying','maint','doors','persons','lug_boot','safety','value')
carEval$value <- as.factor(carEval$value)
# Load the shapes: obli, grid, diam, circ, ring, sh88
load(file = 'data/shapes.RData')
# Load the Glass data
data(Glass, package = 'mlbench')
# Load the BreastCancer data
data(BreastCancer, package = 'mlbench')
BreastCancer$Id <- NULL
for (i in 1:9) {
BreastCancer[, i] <- as.numeric(BreastCancer[, i])
}
#crime <- read.table('data/27062-0001-Data.tsv', header=TRUE, sep="\t", fileEncoding="windows-1252")
# data sets for testing
ds.names <- c("wdbc",
"auto",
"birthwt",
"heart",
"GlaucomaMVF",
"titanic",
"parkin",
"ILPD",
"Ionos",
"pima",
"sonar",
"trans",
"peptide",
"hepatitis",
"derm",
"derm.noi",
"iris",
"Iris",
"dystrophy",
"smiley",
"spirals",
"norm3p5",
"norm3p10",
"xor3",
"protein_balanced",
"haberman",
"mammo",
"votes",
"SPECT",
"tictactoe",
"Glass",
"BreastCancer",
"obli", "grid", "diam", "circ", "ring", "sh88"
)
ds.formula <-c("class ~.",
"origin ~ mpg + cylinders + displacement + horsepower + weight + acceleration",
"low ~ age + lwt + race + smoke + ptl + ht + ui + ftv",  ## ctree does not recognize the formula "low ~ . - bwt" correctly
"AHD ~ .",
"Class ~ .",
"Survived ~ .",
"status ~ .",
"Selector ~ .",
"Class ~ .",
"Class ~ .",
"Class ~ .",
"donated.blood ~ .",
"bind ~ .",
"Class ~ .",
"class ~ .",
"class ~ .",
"Species ~ .",
"Species ~ .",
"Class ~ AGE + CK + H + PK + LD",
"class ~ x1 + x2",
"class ~ x1 + x2",
"classes ~ .",
"classes ~ .",
"classes ~ .",
"mito.2015 ~ iTRAQ8.113 + iTRAQ8.114 + iTRAQ8.115 + iTRAQ8.116 +
iTRAQ8.117 + iTRAQ8.118 + iTRAQ8.119 + iTRAQ8.121",
"survival ~ age + year + axillary.nodes",
"Severity ~ BI.RADS + Age + Shape + Margin + Density",
"V1 ~ .",
"V1 ~ .",
"V10 ~ .",
"Type ~ .",
"Class ~ .",
"y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2"
)
ds.respvar <- c("class",
"origin",
"low",
"AHD",
"Class",
"Survived",
"status",
"Selector",
"Class",
"Class",
"Class",
"donated.blood",
"bind",
"Class",
"class",
"class",
"Species",
"Species",
"Class",
"class",
"class",
"classes",
"classes",
"classes",
"mito.2015",
"survival",
"Severity",
"V1",
"V1",
"V10",
"Type",
"Class",
"y", "y", "y", "y", "y", "y")
# Save all
save.image(file = "data/all.RData")
setwd("C:\\Users\\gn0061\\Google Drive\\R_code\\bsnsing_test")
library(mlbench)
# Clear the environment
rm(list = ls())
# split 1:n into k folds
split.k.folds <- function(indset, k, seed = 2017) {
folds <- list()
curset <- indset
n <- length(indset)
curn <- n
for (i in 1:k) {
set.seed(seed)
folds[[i]] <- sample(curset, round(curn/(k - i + 1)))
curset <- setdiff(curset, folds[[i]])
curn <- length(curset)
=======
result = data.frame(ns, diffEp=NA)
for(n in ns){
result[which(result$ns == n),'diffEp'] = calcDiffEp(c(10,5,2), 20, n)
>>>>>>> 6e2a7842edda9015902256b522d9836affb75a6e
}
result
# Simulation of Newsvendor optimal inventory policy
# Compute the conditional mean of poisson distribution from 0 to x
condPoisMean <- function(lambda, x){
cm = 0
for(i in 0:x){
cm = cm + i*dpois(i,lambda)
}
return(cm)
}
# Split an integer l into n integers that sum up to l
splitLambda <- function(l,n){
if(n>l){n=l}
first = floor(l/n)
if((l-n*first)>0){
return(c(rep(first,n-1),first+(l-n*first)))
}else{return(rep(first,n))}
}
s = 10 # selling price
c = 5 # cost
r = 2 # salvage value
lambda = 20 # arrival rate of Poisson demand process
n = 3 # number of sub-streams
calcDiffEp <- function(scr,lambda,n){
s=scr[1];c=scr[2];r=scr[3]
# Optimal inventory x = quantile((s-c)/(s-r))
x = qpois((s-c)/(s-r), lambda)
# Optimal expected profit
e1 = ppois(x,lambda) - (s-c)/(s-r)
e2 = (s-c)/(s-r) - ppois(x-1,lambda)
Ep = (s-c)*lambda - (s-r)*(x*e1 + lambda*e2)
EpSplit = 0
for(lambda.i in splitLambda(lambda,n)){
x.i=qpois((s-c)/(s-r),lambda.i)
e1.i = ppois(x.i,lambda.i) - (s-c)/(s-r)
e2.i = (s-c)/(s-r) - ppois(x.i-1,lambda.i)
Ep.i = (s-c)*lambda.i - (s-r)*(x.i*e1.i + lambda.i*e2.i)
EpSplit = EpSplit + Ep.i
}
diffEp = Ep - EpSplit
return(c(Ep, EpSplit, diffEp))
}
ns = seq(2,10)
result = data.frame(ns, Ep=NA, EpSplit=NA, diff=NA)
for(n in ns){
result[which(result$ns == n),2:4] = calcDiffEp(c(10,5,2), 20, n)
}
result
ns = seq(2,20)
result = data.frame(ns, Ep=NA, EpSplit=NA, diff=NA)
for(n in ns){
result[which(result$ns == n),2:4] = calcDiffEp(c(10,5,2), 20, n)
}
result
?plot
plot(result$ns,result$diff)
?ppois
ppois(0:20, 10)
lambdas = [3,7]
lambdas = c(3,7)
sum(lambdas)
ppois(0:20, c(3,7))
dim(ppois(0:20, c(3,7)))
length(ppois(0:20, c(3,7)))
x = ppois(0:20,10)
mode(x)
type(x)
summary(x)
str(x)
lambdas = c(3,7)
last.x = 2*sum(lambdas)
cdfs = list()
for(k in 1:length(lambdas)){
cdfs[1] = ppois(0:last.x, lambdas[k])
}
cdfs = list()
for(k in 1:length(lambdas)){
cdfs[k] = ppois(0:last.x, lambdas[k])
}
1:length(lambdas)
cdfs
typeof(cdfs)
class(cdfs)
cdfs=[]
a = c(a,1)
cdfs = numeric(0)
for(k in 1:length(lambdas)){
cdfs = cbind(cdfs, ppois(0:last.x, lambdas[k]))
}
cdfs
cdfs = cbind(cdfs, ppois(0:last.x, sum(lambdas)))
cdfs
lambdas = c(3,5)
last.x = 2*sum(lambdas)
cdfs = numeric(0)
for(k in 1:length(lambdas)){
cdfs = cbind(cdfs, ppois(0:last.x, lambdas[k]))
}
cdfs = cbind(cdfs, ppois(0:last.x, sum(lambdas)))
cdfs
df = as.data.frame(cdfs)
df
dim(cdfs)
zeros(3)
rep(0,3)
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)
pad
rep(cdfs, each=2)
lambdas = c(3,5)
last.x = 2*sum(lambdas)
cdfs = numeric(0)
for(k in 1:length(lambdas)){
cdfs = cbind(cdfs, rep(ppois(0:last.x, lambdas[k]), each=2))
}
cdfs = cbind(cdfs, rep(ppois(0:last.x, sum(lambdas)), each=2))
cdfs
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)
length(cdfs)
dim(cdfs)
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)[1:dim(cdfs)[1],:]
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)[1:dim(cdfs)[1]]
pad
cdfs[1,3]
cdfs[1,:]
cdfs[1,]
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)[1:dim(cdfs)[1],]
pad
cdfs
0:last.x
pad = cbind(rep(0:last.x, each=2), pad)
pad
df = as.data.frame(pad)
lambdas = c(3,5)
last.x = 2*sum(lambdas)
cdfs = numeric(0)
headers = 'x'
for(k in 1:length(lambdas)){
cdfs = cbind(cdfs, rep(ppois(0:last.x, lambdas[k]), each=2))
headers = c(headers, paste0('lambda.',lambdas[k]))
}
cdfs = cbind(cdfs, rep(ppois(0:last.x, sum(lambdas)), each=2))
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)[1:dim(cdfs)[1],]
pad = cbind(rep(0:last.x, each=2), pad)
headers
headers = c(headers, paste0('lambda.',sum(lambdas)))
headers
colnames(df) <- headers
head(df)
plot(df[:,'x'], df[:,'lambda.3'])
plot(df[,'x'], df[,'lambda.3'])
plot(df[,'x'], df[,'lambda.3'], lty=1, pch='.')
lines(df[,'x'], df[,'lambda.3'], lty=1)
lines(df[,'x'], df[,'lambda.5'], lty=1)
lines(df[,'x'], df[,'lambda.8'], lty=1)
lambdas = c(3,5)
last.x = 2*sum(lambdas)
cdfs = numeric(0)
headers = 'x'
cdfs = cbind(cdfs, rep(ppois(0:last.x, sum(lambdas)), each=2))
headers = c(headers, paste0('lambda.',sum(lambdas)))
for(k in 1:length(lambdas)){
cdfs = cbind(cdfs, rep(ppois(0:last.x, lambdas[k]), each=2))
headers = c(headers, paste0('lambda.',lambdas[k]))
}
<<<<<<< HEAD
# Load birthwt
data(birthwt, package = 'MASS')
birthwt$low <- as.factor(birthwt$low)
# Load Titanic
library(datasets)
ti <- as.data.frame(Titanic)
# expand the data by the Freq column
titanic <- with(ti, {
data.frame(Class = rep(Class, Freq), Sex = rep(Sex, Freq), Age = rep(Age, Freq), Survived = rep(Survived, Freq))
})
rm(ti)
# Load Wisconsin Breast Cancer (wdbc) Data
# wdbc <- read.table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"),
#                    sep = ',',
#                    header = F)
# save(wdbc, file = 'data/wdbc.RData')
load(file = 'data/wdbc.RData')
names(wdbc)[1:2] <- c("ID", "class")
wdbc$ID <- NULL
# Load heart
heart <- read.csv("data/Heart.csv", header = T, stringsAsFactors = T)
rownames(heart) <- heart$X
heart$X <- NULL
# Load GlaucomaMVF
data("GlaucomaMVF", package = "ipred")
# Load the Auto data
# library(ISLR)
# auto = Auto
# auto$origin <- as.factor(ifelse(Auto$origin == 1, "USA", "EUJ"))
# auto$name <- NULL
# save(auto, file = 'data/auto.RData')
load(file = 'data/auto.RData')
# Load the parkinsons data
parkin <- read.csv(file = 'data/parkinsons.data', header = T, sep = ',')
rownames(parkin) <- parkin$name
parkin$name <- NULL
parkin$status <- as.factor(parkin$status)
# Load the Indian Liver Patient Dataset (ILPD)
ILPD <- read.csv(file = 'data/ILPD.csv', header = F)
colnames(ILPD) <- c("Age", "Gender", "TB", "DB", "Alkphos", "Sgpt", "Sgot", "TP", "ALB", "AG", "Selector")
ILPD$Selector <- as.factor(ILPD$Selector)
# Load the Ionosphere dataset
Ionos <- read.csv(file = "data/ionosphere.data", header = F)
colnames(Ionos)[35] <- "Class"
# Load the pima-indians-diabetes dataset
pima <- read.csv(file = "data/pima-indians-diabetes.data", header = F)
colnames(pima) <- c("TimesPregnant", "Glucose", "BloodPressure", "SkinThickness", "SerumInsulin", "BMI", "DiabetesPedigree","Age", "Class")
pima$Class <- as.factor(pima$Class)
# Load the sonar data
sonar <- read.csv(file = "data/sonar.data", header = F)
colnames(sonar)[61] <- "Class"
# Load the blood transfusion service center dataset
trans <- read.csv(file = "data/transfusion.data", header = T)
trans$donated.blood <- as.factor(trans$donated.blood)
# Load the peptide dataset
peptide <- read.csv(file = "data/peptide.data", header = T, sep = " ")
rownames(peptide) <- peptide$id
peptide$id <- NULL
peptide$bind <- as.factor(peptide$bind)
# Load the hepatitis dataset
hepatitis <- read.csv(file = "data/hepatitis.data", header = F, na.strings = "?")
colnames(hepatitis) <- c("Class", "Age", "Sex", "Steroid",
"Antivirals", "Fatigue", "Malaise",
"Anorexia", "LiverBig", "LiverFirm",
"SpleenPalpable", "Spiders", "Ascites",
"Varices", "Bilirubin", "AlkPhosphate",
"SGOT", "Albumin", "Protime", "Histology")
hepatitis$Class <- ifelse(hepatitis$Class == 1, "Die", "Live")
hepatitis$Class <- as.factor(hepatitis$Class)
# Load the dermatology dataset
derm <- read.csv(file = "data/dermatology.data", header = F, na.strings = "?")
derm.names <- read.csv(file = "data/dermatology.names", header = F)
colnames(derm) <- derm.names$V1
derm$class <- as.factor(derm$class)
rm(derm.names)
# Dermatology with small perturbation
derm.noi <- derm
derm.noi[, 1:34] <- derm.noi[, 1:34] + matrix(rnorm(nrow(derm.noi)*(ncol(derm.noi)-1), 0, 0.001), nrow = nrow(derm.noi), ncol = ncol(derm.noi) - 1)
# Load iris
Iris <- iris
iris_noise <- matrix(rnorm(nrow(Iris)*(ncol(Iris)-1), 0, 0.001), nrow = nrow(Iris), ncol = ncol(Iris) - 1)
Iris[, 1:4] <- Iris[, 1:4] + iris_noise
rm(iris_noise)
# Load the dystrophy dataset
data('dystrophy', package = 'ipred')
# Load the smiley data
smiley <- as.data.frame(mlbench.smiley())
colnames(smiley) <- c('x1','x2','class')
# Load the spirals data
spirals <- as.data.frame(mlbench.spirals(600, 1.5, 0.05))
colnames(spirals) <- c('x1','x2','class')
# Load the threenorm data
norm3p5 <- as.data.frame(mlbench.threenorm(600, 5))
norm3p10 <- as.data.frame(mlbench.threenorm(600, 10))
# Load the XOR data
xor3 <- as.data.frame(mlbench.xor(600,3))
# Load the MNIST data
#mnist <- read.csv(file = "data/short_prac_train.csv", header = T, na.strings = "?")
#bs <- bsnsing(label ~ ., data = mnist, verbose = T)
=======
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)[1:dim(cdfs)[1],]
pad = cbind(rep(0:last.x, each=2), pad)
df = as.data.frame(pad)
colnames(df) <- headers
head(df)
plot(df[,'x'], df[,2], lty=1, pch='.', )
lines(df[,'x'], df[,2], lty=1)
colors = c('red','blue','green','darkgray','darkorange')
plot(df[,'x'], df[,2], lty=1, pch='.', )
lines(df[,'x'], df[,2], lty=1, col='black')
for(k in 1:length(lambdas)){
lines(df[,'x'],df[,2+k], lty=1, col=colors[k])
}
legend("bottomright",headers[2:2+length(lambdas)],col=c("black",colors[1:length(lambdas)]))
headers[2:2+length(lambdas)]
headers[2:(2+length(lambdas))]
colors = c('red','blue','green','darkgray','darkorange')
plot(df[,'x'], df[,2], lty=1, pch='.', )
lines(df[,'x'], df[,2], lty=1, col='black')
for(k in 1:length(lambdas)){
lines(df[,'x'],df[,2+k], lty=1, col=colors[k])
}
legend("bottomright",headers[2:(2+length(lambdas))],col=c("black",colors[1:length(lambdas)]))
col=c("black",colors[1:length(lambdas)])
col
colors = c('red','blue','green','darkgray','darkorange')
plot(df[,'x'], df[,2], lty=1, pch='.', )
lines(df[,'x'], df[,2], lty=1, col='black')
for(k in 1:length(lambdas)){
lines(df[,'x'],df[,2+k], lty=1, col=colors[k])
}
legend("bottomright",headers[2:(2+length(lambdas))],text.col=c("black",colors[1:length(lambdas)]))
c(sum(lambdas),lambdas)
colors = c('red','blue','green','darkgray','darkorange')
plot(df[,'x'], df[,2], lty=1, pch='.', )
lines(df[,'x'], df[,2], lty=1, col='black')
for(k in 1:length(lambdas)){
lines(df[,'x'],df[,2+k], lty=1, col=colors[k])
}
legend("bottomright",legend = as.expression(lapply(c(sum(lambdas),lambdas), function(x) bquote(lambda==.(x)))),text.col=c("black",colors[1:length(lambdas)]))
colors = c('red','blue','green','darkgray','darkorange')
plot(df[,'x'], df[,2], lty=1, pch='.', xlab = 'x', ylab = 'ppois(x)')
lines(df[,'x'], df[,2], lty=1, col='black')
for(k in 1:length(lambdas)){
lines(df[,'x'],df[,2+k], lty=1, col=colors[k])
}
legend("bottomright",legend = as.expression(lapply(c(sum(lambdas),lambdas), function(x) bquote(lambda==.(x)))),text.col=c("black",colors[1:length(lambdas)]))
# Plot Poisson decomposition
lambdas = c(3,5)
last.x = 2*sum(lambdas)
cdfs = numeric(0)
headers = 'x'
cdfs = cbind(cdfs, rep(ppois(0:last.x, sum(lambdas)), each=2))
headers = c(headers, paste0('lambda.',sum(lambdas)))
for(k in 1:length(lambdas)){
cdfs = cbind(cdfs, rep(ppois(0:last.x, lambdas[k]), each=2))
headers = c(headers, paste0('lambda.',lambdas[k]))
}
pad = rbind(rep(0,dim(cdfs)[2]),cdfs)[1:dim(cdfs)[1],]
pad = cbind(rep(0:last.x, each=2), pad)
df = as.data.frame(pad)
colnames(df) <- headers
colors = c('red','blue','green','darkgray','darkorange')
plot(df[,'x'], df[,2], lty=1, pch='.', xlab = 'x', ylab = 'ppois(x)')
lines(df[,'x'], df[,2], lty=1, col='black')
for(k in 1:length(lambdas)){
lines(df[,'x'],df[,2+k], lty=1, col=colors[k])
}
legend("bottomright",legend = as.expression(lapply(c(sum(lambdas),lambdas), function(x) bquote(lambda==.(x)))),text.col=c("black",colors[1:length(lambdas)]))
library(mlbench)
install.packages('mlbench')
library(mlbench)
p <- mlbench.smiley()
plot(p)
head(p)
smiley <- as.data.frame.mlbench(p)
smiley <- as.data.frame(p)
head(smiley)
library(bsnsing)
colnames(smiley) <- c('x1','x2','class')
head(smiley)
bs <- bsnsing(class ~ ., data = smiley)
library(bsnsing)
library(mlbench)
# Load the smiley data
smiley <- as.data.frame(mlbench.smiley())
colnames(smiley) <- c('x1','x2','class')
bs <- bsnsing(class ~ ., data = smiley)
summary(bs)
plot(mlbench.smiley())
summary(bs[[1]])
summary(bs[[2]])
summary(bs[[3]])
summary(bs[[4]])
p<-mlbench.circle(300,2)
plot(p)
# Load the smiley data
smiley <- as.data.frame(mlbench.smiley())
colnames(smiley) <- c('x1','x2','class')
>>>>>>> 6e2a7842edda9015902256b522d9836affb75a6e
# Load the proteomics dataset
protein = read.csv(file = "data/annotatedProteins.csv", header=T, na.strings = 'NA')
protein = na.omit(protein)
protein_pos <- protein[which(protein$mito.2015 == TRUE), c('mito.2015', 'iTRAQ8.113', 'iTRAQ8.114', 'iTRAQ8.115', 'iTRAQ8.116', 'iTRAQ8.117', 'iTRAQ8.118', 'iTRAQ8.119', 'iTRAQ8.121')]
P <- nrow(protein_pos)
protein_negall <- protein[which(protein$mito.2015 == FALSE), c('mito.2015', 'iTRAQ8.113', 'iTRAQ8.114', 'iTRAQ8.115', 'iTRAQ8.116', 'iTRAQ8.117', 'iTRAQ8.118', 'iTRAQ8.119', 'iTRAQ8.121')]
protein_neg <- protein_negall[sample(1:nrow(protein_negall), P), ]
protein_balanced <- rbind(protein_pos, protein_neg)
protein_balanced$mito.2015 <- as.factor(protein_balanced$mito.2015)
rm(protein, protein_negall, protein_pos, protein_neg, P)
# Load the Haberman data
haberman <- read.table(file = 'data/haberman.data', header = FALSE, sep = ',')
colnames(haberman) <- c("age", "year", "axillary.nodes", "survival")
haberman$survival <- as.factor(ifelse(haberman$survival == 1, "Survived", "Died"))
# Load the mammograph data
mammo <- read.table(file = 'data/mammographic_masses.data', header = FALSE, sep = ',', na.strings = '?')
colnames(mammo) <- c('BI.RADS','Age','Shape','Margin','Density','Severity')
mammo$Shape <- as.factor(ifelse(mammo$Shape == 1, 'round', ifelse(mammo$Shape == 1, 'oval', ifelse(mammo$Shape == 3, 'lobular', ifelse(mammo$Shape == 4, 'irregular', 'unknown')))))
mammo$Margin <- as.factor(ifelse(mammo$Margin == 1, 'circumscribed', ifelse(mammo$Margin == 2, 'microlobulated', ifelse(mammo$Margin == 3, 'obscured', ifelse(mammo$Margin == 4, 'ill_defined', ifelse(mammo$Margin == 5, 'spiculated', 'unknown'))))))
mammo$Severity <- as.factor(ifelse(mammo$Severity == 0, 'benigh','malignant'))
mammo$Density <- as.factor(ifelse(mammo$Density == 1, 'hight', ifelse(mammo$Density == 2, 'iso', ifelse(mammo$Density == 3, 'low', ifelse(mammo$Density == 4, 'fat_containing', 'unknown')))))
mammo <- na.omit(mammo)
# Load the votes data
votes <- read.table(file = 'data/house-votes-84.data', header = F, sep = ',', na.strings = '?')
votes$V1 <- as.factor(votes$V1)
# Load the SPECT data
SPECT <- read.table(file = 'data/SPECT.data', header = F, sep = ',')
SPECT$V1 <- as.factor(SPECT$V1)
# Load the tic-tac-toe data
tictactoe <- read.table(file = 'data/tic-tac-toe.data', header = F, sep = ',')
tictactoe$V10 <- as.factor(tictactoe$V10)
# Load the car evaluation data
carEval <- read.table(file = 'data/car.data', header = F, sep = ',')
colnames(carEval) <- c('buying','maint','doors','persons','lug_boot','safety','value')
carEval$value <- as.factor(carEval$value)
# Load the shapes: obli, grid, diam, circ, ring, sh88
load(file = 'data/shapes.RData')
# Load the Glass data
data(Glass, package = 'mlbench')
# Load the BreastCancer data
data(BreastCancer, package = 'mlbench')
BreastCancer$Id <- NULL
for (i in 1:9) {
BreastCancer[, i] <- as.numeric(BreastCancer[, i])
}
#crime <- read.table('data/27062-0001-Data.tsv', header=TRUE, sep="\t", fileEncoding="windows-1252")
# data sets for testing
ds.names <- c("wdbc",
"auto",
"birthwt",
"heart",
"GlaucomaMVF",
"titanic",
"parkin",
"ILPD",
"Ionos",
"pima",
"sonar",
"trans",
"peptide",
"hepatitis",
"derm",
"derm.noi",
"iris",
"Iris",
"dystrophy",
"smiley",
<<<<<<< HEAD
"spirals",
"norm3p5",
"norm3p10",
"xor3",
"protein_balanced",
"haberman",
"mammo",
"votes",
"SPECT",
"tictactoe",
"Glass",
"BreastCancer",
"obli", "grid", "diam", "circ", "ring", "sh88"
)
=======
"protein")
>>>>>>> 6e2a7842edda9015902256b522d9836affb75a6e
ds.formula <-c("class ~.",
"origin ~ mpg + cylinders + displacement + horsepower + weight + acceleration",
"low ~ age + lwt + race + smoke + ptl + ht + ui + ftv",  ## ctree does not recognize the formula "low ~ . - bwt" correctly
"AHD ~ .",
"Class ~ .",
"Survived ~ .",
"status ~ .",
"Selector ~ .",
"Class ~ .",
"Class ~ .",
"Class ~ .",
"donated.blood ~ .",
"bind ~ .",
"Class ~ .",
"class ~ .",
"class ~ .",
"Species ~ .",
"Species ~ .",
"Class ~ AGE + CK + H + PK + LD",
"class ~ x1 + x2",
<<<<<<< HEAD
"class ~ x1 + x2",
"classes ~ .",
"classes ~ .",
"classes ~ .",
=======
>>>>>>> 6e2a7842edda9015902256b522d9836affb75a6e
"mito.2015 ~ iTRAQ8.113 + iTRAQ8.114 + iTRAQ8.115 + iTRAQ8.116 +
iTRAQ8.117 + iTRAQ8.118 + iTRAQ8.119 + iTRAQ8.121",
"survival ~ age + year + axillary.nodes",
"Severity ~ BI.RADS + Age + Shape + Margin + Density",
"V1 ~ .",
"V1 ~ .",
"V10 ~ .",
"Type ~ .",
"Class ~ .",
"y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2", "y ~ x1 + x2"
)
ds.respvar <- c("class",
"origin",
"low",
"AHD",
"Class",
"Survived",
"status",
"Selector",
"Class",
"Class",
"Class",
"donated.blood",
"bind",
"Class",
"class",
"class",
"Species",
"Species",
"Class",
"class",
<<<<<<< HEAD
"class",
"classes",
"classes",
"classes",
"mito.2015",
"survival",
"Severity",
"V1",
"V1",
"V10",
"Type",
"Class",
"y", "y", "y", "y", "y", "y")
# Save all
save.image(file = "data/all.RData")
getwd()
getwd()
=======
"mito.2015")
length(ds.respvar)
library(bsnsing)
library(rpart)
library(party)
ds = 20
ds.formula[20]
setwd("C:\\Users\\gn0061\\Google Drive\\R_code\\bsnsing_test")
# split 1:n into k folds
split.k.folds <- function(indset, k, seed = 2017) {
folds <- list()
curset <- indset
n <- length(indset)
curn <- n
for (i in 1:k) {
set.seed(seed)
folds[[i]] <- sample(curset, round(curn/(k - i + 1)))
curset <- setdiff(curset, folds[[i]])
curn <- length(curset)
}
return(folds)
}
n <- nrow(eval(parse(text = ds.names[ds])))
k.round = 5
k.test = 2
lambda = 1
nseg = 10
num2factor = 5
opt.model <- 'mip'
#node.size <- max(round(n/k.test*(k.test-1)*0.1), 10)
node.size <- 10
stop.prob = 0.9
max.rules = 5
verbose = F
accu_rp <- rep(0, k.round*k.test)
accu_bs <- rep(0, k.round*k.test)
accu_ct <- rep(0, k.round*k.test)
train_bs <- rep(0, k.round*k.test)
for (rnd in 1:k.round) {
test.folds <- split.k.folds(1:n, k.test, seed = rnd*2017)
for (testfd in 1:k.test) {
test_index <- test.folds[[testfd]]
train_index <- setdiff(1:n, test_index)
newdata <- eval(parse(text = ds.names[ds]))[test_index,]
actual <- eval(parse(text = ds.names[ds]))[test_index, ds.respvar[ds]]
# ctree
model_ct <- ctree(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_ct <- predict(model_ct, newdata, type = 'response')
if (length(pred_ct) != length(actual)) stop("ctree: Predicted and Actual Dimension Mismatch.")
accu_ct[(rnd - 1)*2 + testfd] <- sum(actual == pred_ct)/length(actual)
# rpart
model_rp <- rpart(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index)
pred_rp <- predict(model_rp, newdata, type = 'class')
if (length(pred_rp) != length(actual)) stop("rpart: Predicted and Actual Dimension Mismatch.")
accu_rp[(rnd - 1)*2 + testfd] <- sum(actual == pred_rp)/length(actual)
# bsnsing
model_bs <- bsnsing(as.formula(ds.formula[ds]),
data = eval(parse(text = ds.names[ds])),
subset = train_index,
lambda = lambda,
nseg.numeric = nseg,
opt.model = opt.model,
node.size = node.size,
stop.prob = stop.prob,
max.rules = max.rules,
num2factor = num2factor,
verbose = verbose)
pred_bs <- predict(model_bs, newdata, type = 'class')
if (length(pred_bs) != length(actual)) stop("bsnsing: Predicted and Actual Dimension Mismatch.")
accu_bs[(rnd - 1)*2 + testfd] <- sum(actual == pred_bs)/length(actual)
train_actual <- eval(parse(text = ds.names[ds]))[train_index, ds.respvar[ds]]
train_pred <- predict(model_bs, type = 'class')
train_bs[(rnd - 1)*2 + testfd] <- sum(train_actual == train_pred)/length(train_actual)
}
}
avg_accu_rp <- mean(accu_rp)
avg_accu_ct <- mean(accu_ct)
avg_accu_bs <- mean(accu_bs)
sd_accu_rp <- sd(accu_rp)
sd_accu_ct <- sd(accu_ct)
sd_accu_bs <- sd(accu_bs)
avg_train_bs <- mean(train_bs)
sd_train_bs <- sd(train_bs)
cat(paste(ds.names[ds], "\n"))
cat("rpart: \n")
print(accu_rp)
print(avg_accu_rp)
cat("ctree: \n")
print(accu_ct)
print(avg_accu_ct)
cat("bsnsing: \n")
print(accu_bs)
print(avg_accu_bs)
cat("bsnsing train: \n")
print(train_bs)
print(avg_train_bs)
plot(model_rp)
library(rpart.plot)
rpart.plot(model_rp)
plot(model_ct)
data(Ionosphere, package = 'mlbench')
head(Ionosphere)
Ionos1 <- data(Ionosphere, package = 'mlbench')
Ionos1
bs <- bsnsing(Class ~ ., data = Ionosphere)
Terms <- attr(model.frame(Class ~ ., data = Ionosphere), 'terms')
x <- model.matrix(Terms, data = mf)
mf <- model.frame(Class ~ ., data = Ionosphere)
x <- model.matrix(Terms, data = mf)
head(mf)
summary(mf$Class)
mode(mf$Class)
Terms
y <- model.response(mf)
y
Terms <- attr(mf, "terms")
x <- model.matrix(Terms, data = mf)
summary(Ionosphere$V1)
summary(Ionosphere$V2)
?model.matrix
factorcol <- sapply(mf, function(x) is.factor(x))
factorcol
head(mf)
str(mf)
m <- mf[, factorcol]
head(m)
kk <- ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
kk
Terms
attr(Terms, 'response')
attr(mf, "term.labels")
attr(Terms, "term.labels")
# remove factor variables with only 1 unique value
factorcol <- sapply(mf[, attr(Terms, "term.labels")], function(x) is.factor(x))
factorcol
factormf <- mf[,factorcol]
sapply(factormf, function(x) length(levels(x)))
factorcol
head(factormf)
head(mf)
head(mf[factorcol])
factorcol
factorcol
# remove factor variables with only 1 unique value
mfv <- mf[, attr(Terms, "term.labels")]
factorcol <- sapply(mfv, function(x) is.factor(x))
factormfv <- mfv[, factorcol]
head(factormfv)
sapply(factormfv, function(x) length(levels(x)))
names(sapply(factormfv, function(x) length(levels(x))) == 1)
collevels <- sapply(factormfv, function(x) length(levels(x)))
collevels
names(collevels[, collevels == 1])
names(collevels[collevels == 1])
names(mf)
setwd("C:\\Users\\gn0061\\Google Drive\\R_code\\bsnsing_test")
setwd("/Users/yanchaoliu/GoogleDrive/R_code/bsnsing_test")
load("/Users/yanchaoliu/GoogleDrive/R_code/bsnsing_test/data/all.RData")
head(BreastCancer)
library(bsnsing)
ds.names
ds = 32
ds.formula[ds]
bs <- bsnsing(Class ~ ., data = BreastCancer, node.size = 5, stop.prob = 0.8, max.rules = 10)
head(BreastCancer)
bs <- bsnsing(Class ~ ., data = BreastCancer, node.size = 5, stop.prob = 0.8, max.rules = 10)
>>>>>>> 6e2a7842edda9015902256b522d9836affb75a6e
