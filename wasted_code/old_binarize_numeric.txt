# binarize.numeric <- function(x, name, y, segments = 10, bin.size = 5) {
#   if (segments < 3) {
#     segments <- 3
#     print("The parameter segments is coerced to 3.")
#   }
#   segments = round(segments)
#
#   min.1 <- min(x[y == 1])
#   min.0 <- min(x[y == 0])
#   max.1 <- max(x[y == 1])
#   max.0 <- max(x[y == 0])
#   if ((min.0 < min.1 & max.0 < min.1) | (min.1 < min.0 & max.1 < min.0)) {
#     # return the perfect partition rule
#     if (min.0 < min.1 & max.0 < min.1) {
#       perfect.rule <- paste(name, ">=", (max.0 + min.1)/2)
#     } else {
#       perfect.rule <- paste(name, "<=", (max.1 + min.0)/2)
#     }
#     return(perfect.rule)
#     #stop(paste("Response can be perfectly classified by", name, "."))
#   }
#   # lo <- max(min.1, min.0)
#   # up <- min(max.1, max.0)
#   if (min.1 < min.0) {
#     ss <- x[y == 1 & x < min.0]
#     lo <- (ifelse(length(ss) > 0, max(ss), min.0) + min.0)/2
#   } else {
#     ss <- x[y == 0 & x < min.1]
#     lo <- (ifelse(length(ss) > 0, max(ss), min.1) + min.1)/2
#   }
#   if (max.1 < max.0) {
#     ss <- x[y == 0 & x > max.1]
#     up <- (ifelse(length(ss) > 0, min(ss), max.1) + max.1)/2
#   } else {
#     ss <- x[y == 1 & x > max.0]
#     up <- (ifelse(length(ss) > 0, min(ss), max.0) + max.0)/2
#   }
#
#   unique.count <- length(unique(x[x >= lo & x <= up]))
#   interior.segments <- min(segments-2, floor(unique.count/bin.size))
#   if(interior.segments > 1){
#     cut.points <- c(lo, quantile(x[x >= lo & x <= up], seq(1:(interior.segments - 1))/interior.segments), up)
#   } else cut.points <- c(lo, up)
#
#   bmat <- data.frame(matrix(0L, nrow = length(x), ncol = 2*length(cut.points)))
#   sgns <- rep(c('<=','>'), times = length(cut.points))
#   sgns[1:2] <- c('<','>=')
#   rep.cut <- rep(cut.points, each = 2)
#   colnames(bmat) <- paste(name, sgns, rep.cut)
#   for(j in seq(1, ncol(bmat), by = 2)) {
#     if(j == 1){
#       bmat[,j] <- ifelse(x < rep.cut[j], 1L, 0L)
#     } else {
#       bmat[,j] <- ifelse(x <= rep.cut[j], 1L, 0L)
#     }
#     bmat[,j+1] <- ifelse(bmat[,j] == 0L, 1L, 0L)
#   }
#   return(bmat)
# }
