library(MASS)
n <- nrow(birthwt)
train <- sample(1:n, round(0.5*n))
test <- setdiff(1:n, train)

bs <- bsnsing(low~.-bwt, data=birthwt, subset = train)
summary(bs)
pred.bs <- predict(bs, birthwt[test,], type = 'class')
table(pred.bs, birthwt[test,'low'])

rp <- rpart(low~.-bwt, data=birthwt, subset = train)
pred.rp <- ifelse(predict(rp, birthwt[test,]) > 0.5, 1, 0)
table(pred.rp, birthwt[test, 'low'])

library(datasets)
ti <- as.data.frame(Titanic)
# expand the data by the Freq column
til <- with(ti, {
  data.frame(Class = rep(Class, Freq), Sex = rep(Sex, Freq), Age = rep(Age, Freq), Survived = rep(Survived, Freq))
})
n <- nrow(til)
train <- sample(1:n, round(0.5*n))
test <- setdiff(1:n, train)
bs <- bsnsing(Survived ~ ., data = til, subset = train)
summary(bs)
pred.bs <- ifelse(predict(bs, til[test,], type = 'class') == 1, 'No', 'Yes')
table(pred.bs, til[test,'Survived'])

rp <- rpart(Survived ~ ., data = til, subset = train)
pred.rp <- as.data.frame(predict(rp, til[test,]))
pred.rp <- ifelse( pred.rp$Yes > 0.5, 'Yes', 'No')
table(pred.rp, til[test, 'Survived'])


################# Handwritten digits #######################
di.train <- read.csv(file = "C:/Users/gn0061/Google Drive/data/optdigits.tra", header = F)
di.test <-  read.csv(file = "C:/Users/gn0061/Google Drive/data/optdigits.tes", header = F)
di.train0 <- di.train
di.train0$V65 <- ifelse(di.train$V65 == 0, 1, 0)
di.test0 <- di.test
di.test0$V65 <- ifelse(di.test$V65 == 0, 1, 0)
bs <- bsnsing(V65 ~ ., data = di.train0, nseg.numeric = 16, lambda = 10)
summary(bs)
pred.bs <- ifelse(predict(bs, di.test0, type = 'class') == 1, 1, 0)
table(pred.bs, di.test0$V65)

##### k-fold cross validation
train_control <- trainControl(method = 'cv', number = 5)
grd <- expand.grid(minsplit = c(10,20,30), cp = c(0.001, 0.01, 0.1))
model_rp <- train(origin ~ .-name, data=auto, trControl=train_control, method="rpart", cp = 0.01)

#### Wisconsin Breast Cancer Data ####
# wdbc <- read.table(url("http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"),
#                    sep = ',',
#                    header = F)
# save(wdbc, file = 'data/wdbc.RData')

load(file = 'data/wdbc.RData')
names(wdbc)[1:2] <- c("ID", "class")
wdbc$ID <- NULL
# bs <- bsnsing(class ~ ., data = wdbc, nseg.numeric = 5, verbose = T, opt.model = 'hybrid')
# summary(bs)
# pred.bs <- predict(bs, wdbc, type = 'class')
# table(pred.bs, wdbc$class)
# rp <- rpart(class ~.-ID, data = wdbc)
# pred.rp <- predict(rp, wdbc, type = 'class')
# confusion <- table(pred.rp, wdbc$class)

heart <- read.csv("data/Heart.csv", header = T, stringsAsFactors = T)
rownames(heart) <- heart$X
heart$X <- NULL

bs <- bsnsing(AHD ~ ., data = heart, nseg.numeric = 5, max.rules = 3, verbose = 1, opt.model = 'lp')
bs <- bsnsing(heart[, setdiff(colnames(heart), 'AHD')], heart[,'AHD'], nseg.numeric = 5, max.rules = 3, verbose = 1, opt.model = 'lp')

summary(bs)

library(ipred)
data("GlaucomaMVF")
bs <- bsnsing(Class ~ ., data = GlaucomaMVF, nseg.numeric = 5, verbose = 1, opt.model = 'hybrid')
summary(bs)
tv.folds = split.k.folds(1:nrow(GlaucomaMVF), 2, seed = 2017)
bs <- bsnsing(Class ~ ., data = GlaucomaMVF, subset = tv.folds[[1]], nseg.numeric = 5, verbose = 1, opt.model = 'hybrid')
summary(bs)
pred.bs <- predict(bs, GlaucomaMVF[tv.folds[[2]], ], type = 'class')
table(pred.bs, GlaucomaMVF[tv.folds[[2]], 'Class'])

# Run this:
library(bsnsing)
library(rpart)
library(ISLR)

# data sets for testing
ds.names <- c("wdbc",
              "auto",
              "birthwt",
              "heart",
              "GlaucomaMVF")
ds.formula <-c("class ~.",
               "origin ~.-name",
               "low ~.-bwt",
               "AHD ~ .",
               "Class ~ .")
ds.respvar <- c("class",
                "origin",
                "low",
                "AHD",
                "Class")

# split 1:n into k folds
split.k.folds <- function(indset, k, seed = 2017) {
  folds <- list()
  curset <- indset
  n <- length(indset)
  curn <- n
  for (i in 1:k) {
    set.seed(seed)
    folds[[i]] <- sample(curset, round(curn/(k - i + 1)))
    curset <- setdiff(curset, folds[[i]])
    curn <- length(curset)
  }
  return(folds)
}


k.test = 2
k.train = 3
cps = c(0.0001, 0.001, 0.01)
lambda = 1
bs_param = c(10,20,30)
nseg = 5
opt.model <- 'lp'
node.size <- 30
stop.prob = 0.8
max.rules = 3
verbose = T
#best_nseg_bs = 5

ds = 5
n <- nrow(eval(parse(text = ds.names[ds])))
test.folds <- split.k.folds(1:n, k.test)
best_accu_rp <- rep(0, k.test)
best_accu_bs <- rep(0, k.test)
best_param_rp <- rep(0, k.test)
best_param_bs <- rep(0, k.test)

for (testfd in 1:k.test) {
  test_index <- test.folds[[testfd]]
  tv_index <- setdiff(1:n, test_index)
  tv.folds <- split.k.folds(tv_index, k.train)
  # # do parameter tuning here
  # avg_accu_rp <- rep(0, length(cps))
  # avg_accu_bs <- rep(0, length(cps))
  # # for rpart
  # for (i in 1:length(cps)) {
  #   accuracy_rp = rep(0, k.train)
  #   for (tvfd in 1:k.train) {
  #     valid_index <- tv.folds[[tvfd]]
  #     train_index <- setdiff(tv_index, valid_index)
  #     model_rp <- rpart(ds.formula[ds],
  #                       data = eval(parse(text = ds.names[ds])),
  #                       subset = train_index,
  #                       cp = cps[i])
  #     pred_rp <- predict(model_rp, eval(parse(text = ds.names[ds]))[valid_index,], type = 'class')
  #     confusion_rp <- table(pred_rp, eval(parse(text = ds.names[ds]))[valid_index, ds.respvar[ds]])
  #     accuracy_rp[tvfd] <- (confusion_rp[1,1] + confusion_rp[2,2])/(sum(confusion_rp))
  #   }
  #   avg_accu_rp[i] <- mean(accuracy_rp)
  # }
  #
  # # for bsnsing
  # for (i in 1:length(bs_param)) {
  #   accuracy_bs = rep(0, k.train)
  #   for (tvfd in 1:k.train) {
  #     valid_index <- tv.folds[[tvfd]]
  #     train_index <- setdiff(tv_index, valid_index)
  #     model_bs <- bsnsing(as.formula(ds.formula[ds]),
  #                         data = eval(parse(text = ds.names[ds])),
  #                         subset = train_index,
  #                         lambda = lambda,
  #                         nseg.numeric = bs_param[i],
  #                         opt.model = opt.model,
  #                         node.size = node.size,
  #                         stop.prob = stop.prob,
  #                         max.rules = max.rules,
  #                         verbose = verbose)
  #     pred_bs <- predict(model_bs, eval(parse(text = ds.names[ds]))[valid_index,], type = 'class')
  #     confusion_bs <- table(pred_bs, eval(parse(text = ds.names[ds]))[valid_index, ds.respvar[ds]])
  #     accuracy_bs[tvfd] <- (confusion_bs[1,1] + confusion_bs[2,2])/(sum(confusion_bs))
  #   }
  #   avg_accu_bs[i] <- mean(accuracy_bs)
  # }
  #
  # best_param_rp[testfd] <- (cps[order(-avg_accu_rp)])[1]
  # best_param_bs[testfd] <- (bs_param[order(-avg_accu_bs)])[1]

  # best rp
  model_rp <- rpart(ds.formula[ds],
                    data = eval(parse(text = ds.names[ds])),
                    #cp = best_param_rp[testfd],
                    subset = tv_index)
  pred_rp <- predict(model_rp, eval(parse(text = ds.names[ds]))[test_index,], type = 'class')
  confusion_rp <- table(pred_rp, eval(parse(text = ds.names[ds]))[test_index, ds.respvar[ds]])
  best_accu_rp[testfd] <- (confusion_rp[1,1] + confusion_rp[2,2])/(sum(confusion_rp))

  # best bs
  model_bs <- bsnsing(as.formula(ds.formula[ds]),
                      data = eval(parse(text = ds.names[ds])),
                      subset = tv_index,
                      lambda = lambda,
                      #nseg.numeric = best_param_bs[testfd],
                      nseg.numeric = nseg,
                      opt.model = opt.model,
                      node.size = node.size,
                      stop.prob = stop.prob,
                      max.rules = max.rules,
                      verbose = verbose)
  pred_bs <- predict(model_bs, eval(parse(text = ds.names[ds]))[test_index,], type = 'class')
  completeCases <- complete.cases(eval(parse(text = ds.names[ds]))[test_index, ])
  allCases <- eval(parse(text = ds.names[ds]))[test_index, ds.respvar[ds]]
  OKCases <- allCases[completeCases]
  confusion_bs <- table(pred_bs, OKCases)
  best_accu_bs[testfd] <- (confusion_bs[1,1] + confusion_bs[2,2])/(sum(confusion_bs))
}
best_avg_accu_rp <- mean(best_accu_rp)
best_avg_accu_bs <- mean(best_accu_bs)
cat("rpart: \n")
print(best_accu_rp)
print(best_avg_accu_rp)
print(best_param_rp)
cat("bsnsing: \n")
print(best_accu_bs)
print(best_avg_accu_bs)
print(best_param_bs)
