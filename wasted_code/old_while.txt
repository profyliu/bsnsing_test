while(length(todo.nodes) & iter.count < 20){
    iter.count <- iter.count + 1
    this <- todo.nodes[[1]]
    todo.nodes[[1]] <- NULL
    cat(paste("Iter:", iter.count, "exploring node", this$node.number, "\n"))
    if (this$node.nobs <= control$node.size) {
      this$node.split.rule <- ""
      tree.nodes[[length(tree.nodes) + 1]] <- this
      cat(paste("Node",this$node.number,"is a leaf.", "parent =", this$node.parent, "nobs =", this$node.nobs, "prop =", this$node.prop, "class =", this$node.class, "n1 =", this$node.n1, "n0 =", this$node.n0, "\n"))
    } else {
      this.x <- x[this$node.obs,]
      this.y <- y[this$node.obs]
      bx <- binarize(this.x, this.y, control = control)
      if(is.data.frame(bx)) {}
      if (this$node.split.targe == 1L) {
        bsol <- bsnsing.learn(bx, this.y, control = control)
      } else {
        bsol <- bsnsing.learn(bx, 1 - this.y, control = control)
      }
      if (bsol$n.rules == 0) {
        this$node.split.rule <- ""
      } else {

        # detect null split
        attach(this.x)
        left.obs <- this$node.obs[which(eval(parse(text = bsol$rules)))]
        detach(this.x)
        right.obs <- setdiff(this$node.obs, left.obs)
        left.nobs <- length(left.obs)
        right.nobs <- length(right.obs)
        if (left.nobs == 0 | right.nobs == 0) {
          this$node.split.rule <- ""
          cat(paste("Discarded a null split at node", this$node.number, "\n"))
        } else {

          this$node.split.rule <- bsol$rules
          cat(paste("Rule:", bsol$rules, "\n"))
          seq.no <- seq.no + 1
          left.number <- seq.no
          seq.no <- seq.no + 1
          right.number <- seq.no
          left.parent <- this$node.number
          right.parent <- this$node.number

          left.y <- y[left.obs]
          left.n1 <- length(left.y[left.y == 1])
          left.n0 <- length(left.y[left.y == 0])
          left.class <- ifelse(this$node.split.targe == 1L, 1L, 0L)
          left.split.rule <- ""
          left.split.target <- ifelse(left.n1 >= left.n0, 1L, 0L)
          left.prop <- left.nobs/nobs

          right.y <- y[right.obs]
          right.n1 <- length(right.y[right.y == 1])
          right.n0 <- length(right.y[right.y == 0])
          right.class <- ifelse(this$node.split.targe == 1L, 0L, 1L)
          right.split.rule <- ""
          right.split.target <- ifelse(right.n1 >= right.n0, 1L, 0L)
          right.prop <- right.nobs/nobs

          left <- list(node.number = left.number, node.parent = left.parent, node.class = left.class,
                       node.prop = left.prop, node.nobs = left.nobs, node.n1 = left.n1, node.n0 = left.n0,
                       node.obs = left.obs, node.split.rule = left.split.rule,
                       node.split.target = left.split.target)
          right <- list(node.number = right.number, node.parent = right.parent, node.class = right.class,
                        node.prop = right.prop, node.nobs = right.nobs, node.n1 = right.n1, node.n0 = right.n0,
                        node.obs = right.obs, node.split.rule = right.split.rule,
                        node.split.target = right.split.target)
          todo.nodes[[length(todo.nodes) + 1]] <- left
          todo.nodes[[length(todo.nodes) + 1]] <- right

          #cat(paste("Node",this$node.number,"is split by rule:", this$node.split.rule, "parent =", this$node.parent, "nobs =", this$node.nobs, "prop =", this$node.prop, "class =", this$node.class, "n1 =", this$node.n1, "n0 =", this$node.n0, "\n"))
          cat(paste("Node",this$node.number,"is split by rule:", this$node.split.rule, "\n"))
          cat(paste("-- Left (rule = true) child: Node", left.number, ", parent =", left.parent, "nobs =", left.nobs, "prop =", left.prop, "class =", left.class, "n1 =", left.n1, "n0 =", left.n0, "\n"))
          cat(paste("-- Right (rule = false) child: Node", right.number, ", parent =", right.parent, "nobs =", right.nobs, "prop =", right.prop, "class =", right.class, "n1 =", right.n1, "n0 =", right.n0, "\n"))
        }
      }
      tree.nodes[[length(tree.nodes) + 1]] <- this
    }
  }